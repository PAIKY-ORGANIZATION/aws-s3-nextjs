name: AWS git fetch
on:
  push:
    branches: ['master']

jobs:
  run_in_EC2:
    runs-on: ubuntu-latest
    #environment: Test_Paiky_Environment #$ Optionally, create  a github environment to avoid duplicating secrets across repositories.
    steps:
      # - name: ENV TEST
      #   run: echo "$REPO_PATH" && echo "$REPO_NAME"

      - name: Deploy over SSH
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{secrets.EC2_HOST}} #$ for SSH, don't include port unless not using :22 . Example: 132.84.129.77.
          username: ${{secrets.EC2_USER}}
          key: ${{secrets.EC2_SSH_PRIVATE_KEY}}
          passphrase: ${{ secrets.EC2_SSH_PRIVATE_KEY_PASSPHRASE }} #$ Only if required.


          script: |
            #* Declaring variables for EC2 (it doesn't have access to "env")

            UNIQUE_APP_NAME="${{ secrets.UNIQUE_APP_NAME }}"  #! UNIQUE_APP_NAME must be all lowercase and without underscores for Docker to accept it.
            #! UNIQUE_APP_NAME must be set per-repository
            #! If you are using Docker COMPOSE,  you don't need a unique app name for the image name. However, you still need a unique directory name.
            REPO_PATH="${{ github.repository }}"  #$ Example: # gives "dev-miguel/repo-name". We will use this to clone the repo initially 
            DOCKER_PORT="${{ secrets.DOCKER_PORTS }}"  #! I know it's not being used here




            cd ~/vsCodeMain
            #* If the is no desired-folder with .git, it means the repo doesn't exist so we clone it INTO A DESIRED FOLDER NAME.
            [ -d "$UNIQUE_APP_NAME/.git" ] || git clone git@github.com:$REPO_PATH.git "$UNIQUE_APP_NAME" #! AWS needs  need to use an SSH key of your github account that DOESN'T USE A PASSPHRASE in order to clone.

            cd "$UNIQUE_APP_NAME"
            git fetch
            git merge origin/master


            echo "AWS_ACCESS_KEY=${{ secrets.AWS_ACCESS_KEY }}" >> ./config/shared.env #$ will create shared.env automatically as long as the ./config directory already exists.
            echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> ./config/shared.env
            echo "UNIQUE_APP_NAME=${{ secrets.UNIQUE_APP_NAME }}" >> ./config/shared.env
            echo "AWS_BUCKET_REGION=us-east-2" >> ./config/shared.env #$ This is NOT private but still the shared.env file doesn't get uploaded
            echo "AWS_BUCKET_NAME=next-app-public-bucket" >> ./config/shared.env #$ Same here

            sudo docker compose down 
            #* PICK ONE, READ README.md
            # sudo docker compose -f docker-compose.yml -f docker-compose-full.yml  up --build -d 
            # sudo docker compose -f docker-compose.yml -f docker-compose-network.yml  up --build -d
            sudo docker compose up --build -d


            


